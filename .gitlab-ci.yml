# .gitlab-ci.yml
#
# ink-waterfall
#
# pipelines can be triggered manually in the web

stages:
  - declare-vars
  - test
  - compare-build

variables:
  GIT_STRATEGY:                    fetch
  GIT_DEPTH:                       "100"
  CARGO_TARGET_DIR:                "/ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME}/${CI_JOB_NAME}"
  RUST_LIB_BACKTRACE:              "0"
  RUST_LOG:                        "info"
  CI_IMAGE:                        "paritytech/ink-waterfall-ci:latest"
  INK_EXAMPLES_PATH:               "./ink/examples"
  DELEGATOR_SUBCONTRACTS:          "accumulator adder subber"

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH


.default-refs:                      &default-refs
  rules:
  - if: $CI_PIPELINE_SOURCE == "web"
  - if: $CI_PIPELINE_SOURCE == "schedule"
  - if: $CI_COMMIT_REF_NAME == "master"
  - if: $CI_COMMIT_REF_NAME == "tags"
  - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                   # PRs
  - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1

.basic-env:                         &basic-env
  image:                           "${CI_IMAGE}"
  before_script:
    - cargo -vV
    - rustc -vV
    - rustup show
    - bash --version
    - substrate-contracts-node --version
    - cargo-contract --version
    - ./.scripts/pre_cache.sh
    - sccache -s
    - git show
  <<:                              *default-refs
  interruptible:                   true
  retry:
    max:                           2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure


.docker-env:                      &docker-env
  <<:                             *basic-env
  tags:
    - linux-docker

.kubernetes-env:                  &kubernetes-env
  <<:                             *basic-env
  before_script:                  []
  tags:
    - kubernetes-parity-build


.if-trigger-ref-valid:            &if-trigger-ref-valid
  before_script:
    - if [ "$TRGR_REF" == "master" ] || [ -z "$TRGR_REF" ]; then
        echo "It makes no sense to compare $REDIS_SIZES_KEY to $REDIS_SIZES_KEY_MASTER.";
        echo "Exiting gracefully.";
        exit 0;
      fi

.clone-repo:                       &clone-repo
  - echo ${UPSTREAM_BRANCH} ${UPSTREAM_REPO}
  - git clone --verbose --depth 1 --branch ${UPSTREAM_BRANCH} ${UPSTREAM_REPO}

.clone-repo-past-month:            &clone-repo-past-month
  - PAST_MONTH=$(date -d "-1 month" +%Y-%m-%d)
  - git clone --shallow-since=${PAST_MONTH} --branch ${UPSTREAM_BRANCH} ${UPSTREAM_REPO}

.start-substrate-contracts-node:                     &start-substrate-contracts-node
  - substrate-contracts-node --dev -lruntime::contracts=debug > /tmp/substrate-contracts-node.log 2>&1 &

.start-substrate-contracts-node-rand-extension:      &start-substrate-contracts-node-rand-extension
  - substrate-contracts-node-rand-extension --dev -lruntime::contracts=debug > /tmp/substrate-contracts-node-rand-extension.log 2>&1 &

.shutdown-substrate-contracts-node:                  &shutdown-substrate-contracts-node
  - pkill -f "substrate-contracts-node --dev"

.shutdown-substrate-contracts-node-rand-extension:   &shutdown-substrate-contracts-node-rand-extension
  - pkill -f "substrate-contracts-node-rand-extension --dev"


# Needed vars have to be "exported" in an earlier stage
parent-vars:
  stage:                                             declare-vars
  <<:                                                *kubernetes-env
  variables:
      CI_IMAGE: "paritytech/tools"
  script:
    - |
      # default values
      UPSTREAM_BRANCH="master"
      UPSTREAM_BRANCH_REDIS_KEY="master"
      UPSTREAM_REPO="https://github.com/paritytech/ink.git"
      UPSTREAM_REPO_NAME="ink"

      echo ${TRGR_REF}
      if [ -n "$TRGR_REF" ] && [ "$TRGR_REF" != "master" ]; then
        PR_JSON=`curl -s https://api.github.com/repos/paritytech/ink/pulls/${TRGR_REF}`;
        UPSTREAM_BRANCH=`echo "${PR_JSON}" | jq -r .head.ref`;
        # Since we write the branch name to a file we need to remove any forward slashes
        # which may exist in the name
        UPSTREAM_BRANCH_REDIS_KEY=`echo "${UPSTREAM_BRANCH}" | sed 's/\//-/g'`;
        UPSTREAM_REPO=`echo "${PR_JSON}" | jq -r .head.repo.git_url`;
        UPSTREAM_REPO_NAME=`echo "${PR_JSON}" | jq -r .head.repo.name`;
      fi
    - echo "UPSTREAM_BRANCH=${UPSTREAM_BRANCH}" | tee -a parent-vars.env
    - echo "UPSTREAM_BRANCH_REDIS_KEY=${UPSTREAM_BRANCH_REDIS_KEY}" | tee -a parent-vars.env
    - echo "UPSTREAM_REPO=${UPSTREAM_REPO}" | tee -a parent-vars.env
    - echo "UPSTREAM_REPO_NAME=${UPSTREAM_REPO_NAME}" | tee -a parent-vars.env

    # REDIS_SIZES_KEY (e.g. ink-waterfall::ink::foo-add-feature::sizes)
    #   defines a Redis key name where contract sizes will be stored from an upstream above.
    - echo "REDIS_SIZES_KEY=${CI_PROJECT_NAME}::${UPSTREAM_REPO_NAME}::${UPSTREAM_BRANCH_REDIS_KEY}::sizes" | tee -a parent-vars.env
    - echo "REDIS_SIZES_RAND_EXT_KEY=${CI_PROJECT_NAME}::${UPSTREAM_REPO_NAME}::${UPSTREAM_BRANCH_REDIS_KEY}::sizes_rand_ext" | tee -a parent-vars.env
    - echo "REDIS_GAS_USAGE_KEY=${CI_PROJECT_NAME}::${UPSTREAM_REPO_NAME}::${UPSTREAM_BRANCH_REDIS_KEY}::gas_usage" | tee -a parent-vars.env
    - echo "REDIS_GAS_USAGE_RAND_EXT_KEY=${CI_PROJECT_NAME}::${UPSTREAM_REPO_NAME}::${UPSTREAM_BRANCH_REDIS_KEY}::gas_usage_rand_ext" | tee -a parent-vars.env

    # REDIS_SIZES_KEY_MASTER (e.g. ink-waterfall::ink::master::sizes)
    #   defines a Redis key name for an upstream's master reference branch.
    #   contract sizes stored there will be used for a comparison with contract sizes stored in REDIS_SIZES_KEY.
    - echo "REDIS_SIZES_KEY_MASTER=${CI_PROJECT_NAME}::${UPSTREAM_REPO_NAME}::master::sizes" | tee -a parent-vars.env
    - echo "REDIS_SIZES_RAND_EXT_KEY_MASTER=${CI_PROJECT_NAME}::${UPSTREAM_REPO_NAME}::master::sizes_rand_ext" | tee -a parent-vars.env
    - echo "REDIS_GAS_USAGE_KEY_MASTER=${CI_PROJECT_NAME}::${UPSTREAM_REPO_NAME}::master::gas_usage" | tee -a parent-vars.env
    - echo "REDIS_GAS_USAGE_RAND_EXT_KEY_MASTER=${CI_PROJECT_NAME}::${UPSTREAM_REPO_NAME}::master::gas_usage_rand_ext" | tee -a parent-vars.env
  artifacts:
    reports:
      dotenv: parent-vars.env


.build-ink-example-contracts:                  &build-ink-example-contracts
  - set -o pipefail
  # Copy the local `ink-waterfall` example contracts into `INK_EXAMPLES_PATH`
  # so that they are build and can be tested as well. They'll also show up
  # in the regression bot statistics then.
  - cp -r ./examples/ ${INK_EXAMPLES_PATH}
  - find ./examples/ -name 'Cargo.toml' -exec sed -i "s|../ink|$INK_EXAMPLES_PATH|g" {} \;
  # delete old list items if the key has existed previously
  - redis-cli -u $GITLAB_REDIS_URI del $REDIS_SIZES_KEY
  - echo "Data will be written to $REDIS_SIZES_KEY"
  - for example in ${INK_EXAMPLES_PATH}/*/; do
      echo "set -o pipefail; ./.scripts/build-contract.sh ${example} |
      redis-cli -u ${GITLAB_REDIS_URI} -x rpush ${REDIS_SIZES_KEY}" >> /tmp/cmds;
    done
  - for contract in ${DELEGATOR_SUBCONTRACTS}; do
      echo "./.scripts/build-contract.sh ${INK_EXAMPLES_PATH}/delegator/${contract} |
      redis-cli -u ${GITLAB_REDIS_URI} -x rpush ${REDIS_SIZES_KEY}" >> /tmp/cmds;
    done
  # Exit when the first job fails. Kill running jobs
  - parallel --halt-on-error now,fail=1 -j 2 -a /tmp/cmds --joblog /tmp/joblog
  - cat /tmp/joblog
  # all ci/cd keys need to have ttl
  - redis-cli -u $GITLAB_REDIS_URI expire $REDIS_SIZES_KEY $GITLAB_REDIS_TTL


.build-rand-extension-contract:                  &build-rand-extension-contract
  - set -o pipefail
  # delete old list items if the key has existed previously
  - redis-cli -u $GITLAB_REDIS_URI del $REDIS_SIZES_RAND_EXT_KEY
  - echo "Data will be written to $REDIS_SIZES_RAND_EXT_KEY"
  - ./.scripts/build-contract.sh ./ink/examples/rand-extension/ |
      redis-cli -u ${GITLAB_REDIS_URI} -x rpush ${REDIS_SIZES_RAND_EXT_KEY}
  # all ci/cd keys need to have ttl
  - redis-cli -u $GITLAB_REDIS_URI expire $REDIS_SIZES_RAND_EXT_KEY $GITLAB_REDIS_TTL


.store-ink-examples-gas-usage-to-redis:         &store-ink-examples-gas-usage-to-redis
  - set -o pipefail
  # delete old list items if the key has existed previously
  - redis-cli -u $GITLAB_REDIS_URI del $REDIS_GAS_USAGE_KEY
  - echo "Data will be written to $REDIS_GAS_USAGE_KEY"
  - for example in ${INK_EXAMPLES_PATH}/*/; do
      if [ "$example" == "./ink/examples/rand-extension/" ]; then continue; fi;
      echo $example;
      ./.scripts/extract-gas-usage.sh ${example};
    done
  - for example in ${INK_EXAMPLES_PATH}/*/; do
      if [ "$example" == "./ink/examples/rand-extension/" ]; then continue; fi;
      ./.scripts/extract-gas-usage.sh ${example} |
      redis-cli -u ${GITLAB_REDIS_URI} -x rpush ${REDIS_GAS_USAGE_KEY};
    done
  # all ci/cd keys need to have ttl
  - redis-cli -u $GITLAB_REDIS_URI expire $REDIS_GAS_USAGE_KEY $GITLAB_REDIS_TTL


.store-rand-ext-gas-usage-to-redis:         &store-rand-ext-gas-usage-to-redis
  - set -o pipefail
  # delete old list items if the key has existed previously
  - redis-cli -u $GITLAB_REDIS_URI del $REDIS_GAS_USAGE_RAND_EXT_KEY
  - echo "Data will be written to $REDIS_GAS_USAGE_RAND_EXT_KEY"
  - ./.scripts/extract-gas-usage.sh "rand-extension"
  - ./.scripts/extract-gas-usage.sh "rand-extension" | redis-cli -u ${GITLAB_REDIS_URI} -x rpush ${REDIS_GAS_USAGE_RAND_EXT_KEY}
  # all ci/cd keys need to have ttl
  - redis-cli -u $GITLAB_REDIS_URI expire $REDIS_GAS_USAGE_RAND_EXT_KEY $GITLAB_REDIS_TTL


polkadot-js-ui-ink-examples:       &polkadot-js-ui-ink-examples
  stage:                           test
  <<:                              *docker-env
  script:
    - *clone-repo
    - *start-substrate-contracts-node
    - *build-ink-example-contracts
    - WATERFALL_SKIP_CONTRACT_BUILD=true cargo test --jobs 4 --features headless,polkadot-js-ui 2>&1 |
        tee /tmp/waterfall.log
    - *store-ink-examples-gas-usage-to-redis
  after_script:
    - *shutdown-substrate-contracts-node
  dependencies:
    - parent-vars


polkadot-js-ui-rand-extension:
  stage:                           test
  <<:                              *docker-env
  script:
    - *clone-repo
    - *start-substrate-contracts-node-rand-extension
    - *build-rand-extension-contract
    - WATERFALL_SKIP_CONTRACT_BUILD=true cargo test --features headless,polkadot-js-ui -- --ignored rand_extension 2>&1 |
        tee /tmp/waterfall.log
    - *store-rand-ext-gas-usage-to-redis
  after_script:
    - *shutdown-substrate-contracts-node-rand-extension
  dependencies:
    - parent-vars


evaluate-ink-examples-changes:
  stage:                           compare-build
  <<:                              *kubernetes-env
  # Comparison is made only if a parent (trigger) was created by a PR.
  # Otherwise we would be comparing `master` with `master`.
  <<:                              *if-trigger-ref-valid
  script:
    - *clone-repo-past-month

    # Deserialize comparison data
    - redis-cli -u $GITLAB_REDIS_URI --raw lrange $REDIS_SIZES_KEY 0 -1 | sort | tee $REDIS_SIZES_KEY.csv
    - redis-cli -u $GITLAB_REDIS_URI --raw lrange $REDIS_SIZES_RAND_EXT_KEY 0 -1 | sort | tee --append $REDIS_SIZES_KEY.csv

    - redis-cli -u $GITLAB_REDIS_URI --raw lrange $REDIS_SIZES_KEY_MASTER 0 -1 | sort | tee $REDIS_SIZES_KEY_MASTER.csv
    - redis-cli -u $GITLAB_REDIS_URI --raw lrange $REDIS_SIZES_RAND_EXT_KEY_MASTER 0 -1 | sort | tee --append $REDIS_SIZES_KEY_MASTER.csv

    - redis-cli -u $GITLAB_REDIS_URI --raw lrange $REDIS_GAS_USAGE_KEY 0 -1 | sort | tee $REDIS_GAS_USAGE_KEY.csv
    - redis-cli -u $GITLAB_REDIS_URI --raw lrange $REDIS_GAS_USAGE_RAND_EXT_KEY 0 -1 | sort | tee --append $REDIS_GAS_USAGE_KEY.csv
    - redis-cli -u $GITLAB_REDIS_URI --raw lrange $REDIS_GAS_USAGE_KEY_MASTER 0 -1 | sort | tee $REDIS_GAS_USAGE_KEY_MASTER.csv
    - redis-cli -u $GITLAB_REDIS_URI --raw lrange $REDIS_GAS_USAGE_RAND_EXT_KEY_MASTER 0 -1 | sort | tee --append $REDIS_GAS_USAGE_KEY_MASTER.csv

    - PR_COMMENTS_URL=https://api.github.com/repos/paritytech/ink/issues/${TRGR_REF}/comments
    - ./.scripts/evaluate-examples-changes.sh $PR_COMMENTS_URL
        $REDIS_SIZES_KEY_MASTER.csv $REDIS_SIZES_KEY.csv
        $REDIS_GAS_USAGE_KEY_MASTER.csv $REDIS_GAS_USAGE_KEY.csv
  dependencies:
    - parent-vars


build_badge:
  stage:                           compare-build
  rules:
    only:
      refs:
        - branches
        - master
        - tags
  <<:                              *docker-env
  before_script:
    - chmod +x .scripts/get-updated-badge-info.sh
  script:
    - echo "building badge"
  after_script:
    - .scripts/get-updated-badge-info.sh
  artifacts:
    paths:
        - badge.json
    when: always
    expire_in: 4 weeks
