# .gitlab-ci.yml
#
# ink-waterfall
#
# pipelines can be triggered manually in the web

stages:
  - test
  - build

variables:
  GIT_STRATEGY:                    fetch
  GIT_DEPTH:                       "100"
  CARGO_TARGET_DIR:                "/ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME}/${CI_JOB_NAME}"
  RUST_LIB_BACKTRACE:              "0"
  RUST_LOG:                        "info"
  CI_IMAGE:                        "paritytech/ink-waterfall-ci:latest"
  INK_EXAMPLES_PATH:               "./ink/examples/"
  DELEGATOR_SUBCONTRACTS:          "accumulator adder subber"

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

.docker-env:                       &docker-env
  image:                           "${CI_IMAGE}"
  before_script:
    - cargo -vV
    - rustc -vV
    - rustup show
    - bash --version
    - canvas --version
    - cargo-contract --version
    - ./.scripts/pre_cache.sh
    - sccache -s
    - git show
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME == "tags"
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                   # PRs
    - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1
  dependencies:                    []
  interruptible:                   true
  retry:
    max:                           2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  tags:
    - linux-docker

.clone-repo:                       &clone-repo
  - BRANCH="master"
  - REPO="https://github.com/paritytech/ink.git"
  - echo ${TRGR_REF}
  - if [ -n "$TRGR_REF" ] && [ "$TRGR_REF" != "master" ]; then
      PR_JSON=`curl -s https://api.github.com/repos/paritytech/ink/pulls/${TRGR_REF}`;
      BRANCH=`echo "${PR_JSON}" | jq -r .head.ref`;
      REPO=`echo "${PR_JSON}" | jq -r .head.repo.git_url`;
    fi
  - echo ${BRANCH}
  - echo ${REPO}
  - git clone --depth 1 --branch ${BRANCH} ${REPO}

.start-canvas:                     &start-canvas
  - canvas --tmp --dev -lruntime::contracts=debug > /tmp/canvas.log 2>&1 &

.start-canvas-rand-extension:      &start-canvas-rand-extension
  - canvas-rand-extension --tmp --dev -lruntime::contracts=debug > /tmp/canvas-rand-extension.log 2>&1 &

.prepare-artifacts:                &prepare-artifacts
  - CSV_NAME="master"
  - if [ "$BRANCH" != "master" ]; then 
      CSV_NAME="${CI_COMMIT_BRANCH}";
    fi
  # We want to make sure we have a clean file with each run
  - if test -f "$CSV_NAME.csv"; then
      rm "$CSV_NAME.csv";
    fi

.build-contracts:                  &build-contracts
  - if test -f "$CI_COMMIT_BRANCH.csv"; then
      rm "$CI_COMMIT_BRANCH.csv";
    fi
    #- echo "./.scripts/build-contract.sh ${INK_EXAMPLES_PATH}/flipper ${CSV_NAME}" >> /tmp/cmds
  - for example in ${INK_EXAMPLES_PATH}/*; do
      echo "./.scripts/build-contract.sh ${example} ${CSV_NAME}" >> /tmp/cmds;
    done
  - for contract in ${DELEGATOR_SUBCONTRACTS}; do
      echo "cargo contract build --manifest-path=${INK_EXAMPLES_PATH}/delegator/${contract}/Cargo.toml" >> /tmp/cmds;
    done
  - parallel -j 2 < /tmp/cmds

.shutdown-canvas:                  &shutdown-canvas
  - pkill -f "canvas --tmp --dev"

.shutdown-canvas-rand-extension:   &shutdown-canvas-rand-extension
  - pkill -f "canvas-rand-extension --tmp --dev"

canvas-ui-ink-examples:
  stage:                           test
  <<:                              *docker-env
  script:
    - *clone-repo
    - *start-canvas
    - *prepare-artifacts
    - *build-contracts
      # - WATERFALL_SKIP_CONTRACT_BUILD=true cargo test --jobs 4 --features headless
  after_script:
    - *shutdown-canvas
  artifacts:
    paths:
      - master.csv
      - $CI_COMMIT_BRANCH.csv
    expire_in: 4 weeks

.polkadot-js-ui-ink-examples:
  stage:                           test
  <<:                              *docker-env
  script:
    - *clone-repo
    - *start-canvas
    - *prepare-artifacts
    - *build-contracts
    - WATERFALL_SKIP_CONTRACT_BUILD=true cargo test --jobs 4 --features headless,polkadot-js-ui
  after_script:
    - *shutdown-canvas

.canvas-ui-rand-extension:
  stage:                           test
  <<:                              *docker-env
  script:
    - *clone-repo
    - *start-canvas-rand-extension
    - cargo test --features headless -- --ignored rand_extension
  after_script:
    - *shutdown-canvas-rand-extension

.polkadot-js-ui-rand-extension:
  stage:                           test
  <<:                              *docker-env
  script:
    - *clone-repo
    - *start-canvas-rand-extension
    - cargo test --features headless,polkadot-js-ui -- --ignored rand_extension
  after_script:
    - *shutdown-canvas-rand-extension

build_badge:
  stage: build
  rules:
    only:
      refs:
        - branches
        - master
        - tags
  <<:                              *docker-env
  before_script:
    - chmod +x .scripts/get-updated-badge-info.sh
  script:
    - echo "building badge"
  after_script:
    - .scripts/get-updated-badge-info.sh
  artifacts:
    paths:
        - badge.json
    when: always
    expire_in: 4 weeks
