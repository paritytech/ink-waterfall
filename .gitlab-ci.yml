# .gitlab-ci.yml
#
# ink-waterfall
#
# pipelines can be triggered manually in the web

stages:
  - declare-vars
  - test
  - build-and-compare

variables:
  GIT_STRATEGY:                    fetch
  GIT_DEPTH:                       "100"
  CARGO_TARGET_DIR:                "/ci-cache/${CI_PROJECT_NAME}/targets/${CI_COMMIT_REF_NAME}/${CI_JOB_NAME}"
  RUST_LIB_BACKTRACE:              "0"
  RUST_LOG:                        "info"
  CI_IMAGE:                        "paritytech/ink-waterfall-ci:latest"
  INK_EXAMPLES_PATH:               "./ink/examples"
  DELEGATOR_SUBCONTRACTS:          "accumulator adder subber"

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

.default-refs:                      &default-refs
  rules: 
  - if: $CI_PIPELINE_SOURCE == "web"
  - if: $CI_PIPELINE_SOURCE == "schedule"
  - if: $CI_COMMIT_REF_NAME == "master"
  - if: $CI_COMMIT_REF_NAME == "tags"
  - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                   # PRs
  - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1

.default-refs-trgr-ref-master:      &default-refs-trgr-ref-master
  rules:
  - if: $TRGR_REF == "master"

.default-refs-trgr-ref-pr:      &default-refs-trgr-ref-pr
  rules:
  - if: $TRGR_REF == "master"
    when: never
  - if: $CI_PIPELINE_SOURCE == "web"
  - if: $CI_PIPELINE_SOURCE == "schedule"
  - if: $CI_COMMIT_REF_NAME == "master"
  - if: $CI_COMMIT_REF_NAME == "tags"
  - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                   # PRs
  - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/        # i.e. v1.0, v2.1rc1

.basic-env:                         &basic-env
  image:                           "${CI_IMAGE}"
  before_script:
    - cargo -vV
    - rustc -vV
    - rustup show
    - bash --version
    - substrate-contracts-node --version
    - cargo-contract --version
    - ./.scripts/pre_cache.sh
    - sccache -s
    - git show
  <<:                              *default-refs
  interruptible:                   true
  retry:
    max:                           2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure


.docker-env:                      &docker-env
  <<:                             *basic-env
  tags:
    - linux-docker

.kubernetes-env:                  &kubernetes-env
  <<:                             *basic-env
  before_script:                  []
  tags:
    - kubernetes-parity-build


.clone-repo:                       &clone-repo
  - git clone --depth 1 --branch ${BRANCH} ${REPO}

.collect-artifacts-master:                &collect-artifacts-master
  artifacts:
    name:                          "${CI_JOB_NAME}_${REPO_NAME}_${BRANCH}"
    when:                          on_success
    expire_in:                     7 days
    paths:
      - artifacts/master

.collect-artifacts-pr:                    &collect-artifacts-pr
  artifacts:
    name:                          "${CI_JOB_NAME}_${REPO_NAME}_${BRANCH}"
    when:                          on_success
    expire_in:                     7 days
    paths:
      - artifacts/pr

.start-substrate-contracts-node:                     &start-substrate-contracts-node
  - substrate-contracts-node --tmp --dev -lruntime::contracts=debug > /tmp/substrate-contracts-node.log 2>&1 &

.start-substrate-contracts-node-rand-extension:      &start-substrate-contracts-node-rand-extension
  - substrate-contracts-node-rand-extension --tmp --dev -lruntime::contracts=debug > /tmp/substrate-contracts-node-rand-extension.log 2>&1 &

.build-contracts:                  &build-contracts
  - mkdir -p artifacts/${REF_KIND}
  - for example in ${INK_EXAMPLES_PATH}/*/; do
      echo "./.scripts/build-contract.sh ${example} ./artifacts/${REF_KIND}/${CSV_NAME}" >> /tmp/cmds;
    done
  - for contract in ${DELEGATOR_SUBCONTRACTS}; do
      echo "./.scripts/build-contract.sh ${INK_EXAMPLES_PATH}/delegator/${contract} ./artifacts/${REF_KIND}/${CSV_NAME}" >> /tmp/cmds;
    done
  # TODO: looks like a race condition with possible simultaneous write to a single CSV file. Can break its formatting
  - parallel -j 2 < /tmp/cmds

.shutdown-substrate-contracts-node:                  &shutdown-substrate-contracts-node
  - pkill -f "substrate-contracts-node --tmp --dev"

.shutdown-substrate-contracts-node-rand-extension:   &shutdown-substrate-contracts-node-rand-extension
  - pkill -f "substrate-contracts-node-rand-extension --tmp --dev"

# needed vars have to be "exported" on a earlier stage
parent-vars:
  stage:                           declare-vars
  <<:                              *kubernetes-env
  script:
    - BRANCH="master"
    - REPO="https://github.com/paritytech/ink.git"
    - REPO_NAME="ink"
    - REF_KIND="master"
    - echo ${TRGR_REF}
    - if [ -n "$TRGR_REF" ] && [ "$TRGR_REF" != "master" ]; then
        PR_JSON=`curl -s https://api.github.com/repos/paritytech/ink/pulls/${TRGR_REF}`;
        BRANCH=`echo "${PR_JSON}" | jq -r .head.ref`;
        REPO=`echo "${PR_JSON}" | jq -r .head.repo.git_url`;
        REPO_NAME=`echo "${PR_JSON}" | jq -r .head.repo.name`;
        REF_KIND="pr";
      fi
    - echo "BRANCH=${BRANCH}" | tee -a parent-vars.env
    - echo "REPO=${REPO}" | tee -a parent-vars.env
    - echo "REPO_NAME=${REPO_NAME}" | tee -a parent-vars.env
    - echo "CSV_NAME=${REPO_NAME}_${BRANCH}" | tee -a parent-vars.env
    - echo "REF_KIND=${REF_KIND}" | tee -a parent-vars.env
  artifacts:
    reports:
      dotenv: parent-vars.env

.polkadot-js-ui-ink-examples-template:  &polkadot-js-ui-ink-examples-template
  stage:                           test
  <<:                              *docker-env
  script:
    - *clone-repo
    - *start-substrate-contracts-node
    - *build-contracts
    # - WATERFALL_SKIP_CONTRACT_BUILD=true cargo test --jobs 4 --features headless,polkadot-js-ui
  after_script:
    - *shutdown-substrate-contracts-node
  dependencies:
    - parent-vars

# added to a pipeline only if parent was created on master
polkadot-js-ui-ink-examples-master:
  <<:                              *polkadot-js-ui-ink-examples-template
  <<:                              *collect-artifacts-master
  <<:                              *default-refs-trgr-ref-master

# added to a pipeline only if parent was created by any other means (on prs basically)
polkadot-js-ui-ink-examples-pr:
  <<:                              *polkadot-js-ui-ink-examples-template
  <<:                              *collect-artifacts-pr
  <<:                              *default-refs-trgr-ref-pr

# comparison is made if parent was created on prs only. otherwise we would compare master with master
polkadot-js-ui-ink-examples-compare-results:
  stage:                           build-and-compare
  <<:                              *kubernetes-env
  # TODO: run on paritytech/ink-waterfall-ci, alpine is just for example here
  variables:
    CI_IMAGE: "alpine"
  script:
    # TODO: replace with comparison logic / comparison script invocation
    - apk add tree
    - tree -a artifacts
  needs:
    # enable in a future prs. this has to be initially populated
    # we want to download master's artifacts from the previous successful job in the past pipeline
    # - project: $CI_PROJECT_PATH
    #   job: $CI_JOB_NAME
    #   ref: master
    #   artifacts: true

    # dag + artifacts
    - job: polkadot-js-ui-ink-examples-pr
      artifacts: true
  <<:                              *default-refs-trgr-ref-pr








# .polkadot-js-ui-rand-extension:
#   stage:                           test
#   <<:                              *docker-env
#   script:
#     - *clone-repo
#     - *start-substrate-contracts-node-rand-extension
#     - cargo test --features headless,polkadot-js-ui -- --ignored rand_extension
#   after_script:
#     - *shutdown-substrate-contracts-node-rand-extension

# build_badge:
#   stage:                           build-and-compare
#   rules:
#     only:
#       refs:
#         - branches
#         - master
#         - tags
#   <<:                              *docker-env
#   before_script:
#     - chmod +x .scripts/get-updated-badge-info.sh
#   script:
#     - echo "building badge"
#   after_script:
#     - .scripts/get-updated-badge-info.sh
#   artifacts:
#     paths:
#         - badge.json
#     when: always
#     expire_in: 4 weeks
